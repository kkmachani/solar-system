name: Continuous Deployment

on:
  workflow_dispatch:
  push:
     branches:
         - main
         - 'feature/*'
env:
   MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
   MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
   MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
jobs: 
    unit-testing:
        name: Unit-Testing
        strategy:
            matrix:
                nodejs_version: [18,19,20]
                operating_system: [ubuntu-latest]
                # exclude:
                #     - nodejs_version: 18
                #       operating_system: macos-latest
        runs-on: ${{matrix.operating_system}} 
        environment:
          name: Dev
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Setup Nodejs version - ${{matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
              node-version: ${{matrix.nodejs_version}}

        - name: Install Dependencies
          run: npm install
        
        - name: Unit Testing
          run: npm test


    code-coverage:
        name: code coverage
        needs: [unit-testing]
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Setup Nodejs version - 18
          uses: actions/setup-node@v3
          with:
              node-version: 18

        - name: Install Dependencies
          run: npm install
        
        - name: check code coverage
          continue-on-error: true # continues the workflow even one of the job is failed
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage Result
            path: coverage
            retention-days: 
    
    Docker:
          name: Containerization
          needs: [unit-testing, code-coverage]
          permissions:
             packages: write
          runs-on: ubuntu-latest
          steps:
          - name: Checkout repo
            uses: actions/checkout@v4
            
          - name: Docker Login
            uses: docker/login-action@v3
            with:
              username: ${{ vars.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
          
          - name: GHCR Login
            uses: docker/login-action@v3
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - name: Building Docker Image
            uses: docker/build-push-action@v4
            with:
              context: .
              push: false
              tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
  
          - name: Docker Image testing
            run: |
              docker images
              docker run --name solar-system-app -d \
                  -p 3000:3000\
                  -e MONGO_URI=$MONGO_URI \
                  -e MONGO_USERNAME=$MONGO_USERNAME \
                  -e MONGO_PASSWORD=$MONGO_PASSWORD \
                  ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
                
              export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
              echo $IP
  
                
          - name: Container Registry Push
            uses: docker/build-push-action@v4
            with:
              context: .
              push: true
              tags: |
                  ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
                  ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
    
    Dev-deploy:
           needs: Docker
           environment:
             name: Dev
             url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
           outputs:
             APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
           
           runs-on: ubuntu-latest
           steps:
             - name: checkout repo
               uses: actions/checkout@v4
             
             - name: Install Minikube
               run: |
                  curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
                  sudo install minikube-linux-amd64 /usr/local/bin/minikube

             - name: Start Minikube with Docker driver
               run:  minikube start --driver=docker
            
             - name: Install Kubectl CLI
               uses: azure/setup-kubectl@v4
               with:
                  version: 'v1.25.0' # default is latest version
             
             - name: Configure Kubeconfig
               run:  |
                kubectl config view --minify
                

             - name: Set Config file
               uses: azure/k8s-set-context@v4
               with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBE_CONFIG}}

             - name: Fetch Minikube cluster details
               run: |
                 minikube addons enable ingress
                 minikube version --short
                 echo -------------------------
                 kubectl get nodes
                 kubectl get pods
                 kubectl get pods -n kube-system
                 minikube ip


            # #  - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
            # #    run: |
            # #      echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}""

             - name: Replace Tokens in Manifest File
               uses: fjogeleit/yaml-update-action@main
               with:
                  valueFile: 'manifests/prod/deployment_ai_assist_be.yml'
                  propertyPath: 'metadata.namespace'
                  value: ${{ env.NAMESPACE }}
                  branch: production
                  targetBranch: production
            
             - name: check the files
               run: |
                 cat kubernetes/development/*.yaml
            
            #  - name: create namespace
            #    run: kubectl create namespace development

            #  - name: Check the namespaces
            #    run: kubectl get namespaces

            #  - name: Delete the namespaces
            #    run: kubectl delete namespace development

            #  - name: Get secrets
            #    run: kubectl get secrets -n development

            #  - name: Create Mongodb secrets
            #    run: |
            #      kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            #        --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            #        --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            #        --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            #        --save-config \
            #        --dry-run=client \
            #        -o yaml | kubectl apply -f -
              
             
            #  - name: Get secrets
            #    run: kubectl get secrets -n development
             

            #  - name: Deploy to Dev environment
            #    run: |
            #      kubectl apply -f kubernetes/development
                  

            



